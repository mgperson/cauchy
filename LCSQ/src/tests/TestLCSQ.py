import unittest

from ..LCSQ import LCSQ

class TestLCSQ(unittest.TestCase):
    def setUp(self):
        self.s = 'AACCTTGG'
        self.t = 'ACACTGTGA'
        #self.lcsq = LCSQ(self.s,self.t)
        #self.u = self.lcsq.answer
        self.s2 = 'CGGTGCAATACATCGCTTGGCTGGTGACTCTTACCTCCGCCGTACACTCTTCCCACGCCGTCTTCCCAGGCGCACTGCTAAGGATTGCAACTGGAGTAGTTAGAGAATATGGACTATGAACACTTTATTCTTTTGGCACTAAGGGTGGTCAAACGAATGTTCCTCAAGCCCGTACCGAAAACCTTAAGGATCAGCCTTTCGGGCTCAGGAGAAGTCCGTCAGTTAGTCGGTCCTGGCCCGAAAAATTCTTGTAAGGAAGTCGGGGTACCTTGTACCGTGTGGGATGATCGAGATTACCAAAAGCTCTGGTGCTAATACTGTTCAGGAGCCATGGTACTATCACGGCGAGAACTAAATGCGCTCCGCCCGTTATAATTGACGTTTGGCCGGCTAAAGTACTTTCGTATGAGGGAACTGTCTCCTGACATGGCTGAATGTCGCACTATGTCTGTAGACGGGATGCTGCTAGCAATGTTAGAGACCTGAGTACGGACCGAGATACTCTTTAACGTCCTGAAAAGTCTGCTCAGCTCGCGACGGGCACAAATGTTCAGAGGGTCCGCAGCCATCTAAGATATTTGGAGCAATGAAGCGAACTTACATAATTGGATAGCAGTATAAGAGACCTCTTTGATGGTTCTCCATGTCGCGAAACAGACCGCTGTACGAATATCTACAGGCCATCCCACACCTAGACCTAGCCGTCATGGATTATACTCAGACTCAACTCAAGACATCCGCAAAAATGTCGCCTGGGATTCTGATTCTTATAGAAAGTAGGAGCTGTACCCAGGAGCCCGATGCCTTCGCTAGCAGGTATAGTAGCTTTGCTTCGCACGTACACAAGTCCTTTGGGCTTTATTATTGAAACCATGTTCGTAGTGAAGTTCGCCTCAAGCAACGTTATCGTGTAAAAGTGGTCG'
        self.t2 = 'CCTGGCCGGAAGCCTTATCGAAAGGCAAAGAAACGGAGTAAAATTGCTCCCGGTGAAGGCGTTTACGCTGTCTTTAGCGGTCCTTACGATTGAATGTTTGGAAGTACACTAGGAGCCGATAGCCCTTGGATAGAGGGCAGAATACAAAGGACACAATGAGTTTTTCTAACACCATCATTCACGTTGCGATTACAGTTCCGTTTCAGCAACTTTCACTCCAATCTCTTCATACGCGACTTAGGTCATGCGGTAATTAACAGCGCGCCACGTTTGCAAAGCTACTTGTGTATGGGAAGGGGGGGCTTCACTTTCTCTGAGTATGATCACGCATACGAAAGCAAGGCTGTAGAAACGCCTTTCCTAAGCGCGGACGTTATAGTTATGTGCGGCCTCCGTCCTCTTATAGCGGATCAGAAGTGCACCACACTATTGACCCTGCACACGTACACAGCTAAACGGCGTTTCCCTTCCAGCGGTAGCTTCAGCGTGCCGCACGCTGACGTAATAAGATTGCGGGCGGAGTCTTTCCACTACCTCTCTCGCGGAGCTACCATCCACTAGGCGGTGGTTCTTCATCCACTTATAAGAAGTGCAGAGTTATGCTGGAGTTATTAGTCCCCATGGGCATATATTCCTCATAACTCGTGACTTACCGGCCGGCGACCTTAGCGATTTTCCTTCCGGTTGGCGCTCTAAACCTATAGCAGGACTGTAGTACACAGGACAACTTCTCTGATGGGACTCATGGTCAGACCCTGGACTCTTCCTCTTTAGCCAATAGACGTCGCGGCCTCTCAACGTTTTAAGCTGTAATCCTGA'
        #self.lcsq = LCSQ(self.s2, self.t2)
        #self.u2 = self.lcsq.answer
        self.s3 = 'ATCTGAT'
        self.t3 = 'TGCATA'
        self.lcsq = LCSQ(self.s3,self.t3)
        self.u3 = self.lcsq.shortest_supersequence
        pass

    @unittest.skip('Skip')
    def test_is_subsequence(self):
        self.assertTrue(self.lcsq._LCSQ__is_subsequence('abcdef','ace'))
        self.assertFalse(self.lcsq._LCSQ__is_subsequence('racecar','acra'))

    # #@unittest.skip('Skip for now')
    # def test_get_longest_common_subsequence(self):
    #     self.assertEqual(self.lcsq.get_longest_common_subsequence('A', ''), '')
    #     self.assertEqual(self.lcsq.get_longest_common_subsequence('AC', 'C'), 'C')

    @unittest.skip('Skip')
    def test_is_lcsq_result_subsequence(self):
        self.assertTrue(self.lcsq._LCSQ__is_subsequence(self.s,self.u))
        self.assertTrue(self.lcsq._LCSQ__is_subsequence(self.t,self.u))
        self.assertTrue(self.lcsq._LCSQ__is_subsequence(self.s2, self.u2))
        self.assertTrue(self.lcsq._LCSQ__is_subsequence(self.t2, self.u2))

    @unittest.skip('Skip')
    def test_is_lcsq_result_length_correct(self):
        self.assertEqual(len(self.u),6)
        self.assertEqual(len(self.u2),560)

    def test_is_shortest_supersequence_correct(self):
        self.assertEqual(self.u3,'ATCTGCATA')



