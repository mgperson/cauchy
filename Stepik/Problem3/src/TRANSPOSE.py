import sys
sys.path.insert(0,'C:\\Users\\mgpers\\Documents\\python_projects\\cauchy\\Stepik\\Problem3\src')

from EDTA import EDTA
from EDIT import EDIT

class TRANSPOSE:
    def __init__(self,n,l,d,genome,insert_delete_mode):
        self.n = n
        self.l = l
        self.d = d
        self.insert_delete_mode = insert_delete_mode
        self.genome = genome
        self.genome_length = len(self.genome)

        self.strand_cache = {}
        self.cigar_strings = []
        self.get_results()
        self.output_solution()

    def __str__(self):
        result = [self.e_strand]
        #for i in range(self.n):
        for i in range(len(self.cigar_strings)):
            #result.append(str(self.locations[i] + 1) + ' ' + str(self.cigar_strings[i]))
            result.append(str(self.locations[i][0] + 1) + ' ' + str(self.cigar_strings[i]))
        return '\n'.join(result)

    def output_solution(self):
        with open('solution.txt','w') as output_file:
            output_file.write(self.e_strand + '\n')
            #for i in range(self.n):
            for i in range(len(self.cigar_strings)):
                #output_file.write(str(self.locations[i] + 1) + ' ' + str(self.cigar_strings[i]) + '\n')
                output_file.write(str(self.locations[i][0] + 1) + ' ' + str(self.cigar_strings[i]) + '\n')


    def get_results(self):
        self.e_strand, self.locations = self.get_E_strand()
        print(self.e_strand,self.locations)
        #for i in range(self.n):
        for i in range(len(self.locations)):
            #self.cigar_strings.append(self.get_CIGAR_string_at_location(self.e_strand,self.locations[i]))
            #print(self.locations[i])
            #self.cigar_strings.append(self.get_CIGAR_string_at_location(self.e_strand, self.locations[i][0]))
            self.cigar_strings.append(self.get_CIGAR_string(self.e_strand, self.locations[i][1]))

    def get_CIGAR_string(self,strand,other_strand):
        #print(strand,other_strand)
        edta = EDTA(strand,other_strand)
        strand_align,other_strand_align = edta.s_prime,edta.t_prime

        print(strand_align,other_strand_align)
        cigar_string = []
        for i in range(len(strand_align)):
            if strand_align[i] == other_strand_align[i]:
                cigar_string += 'M'
            elif strand_align[i] == '-':
                cigar_string += 'D'
            elif other_strand_align[i] == '-':
                cigar_string += 'I'
            else:
                cigar_string += 'X'

        #compress cigar string
        result = []
        prev_elem = cigar_string[0]
        prev_elem_count = 0
        #print(cigar_string)
        for i in cigar_string:
            if i == prev_elem:
                prev_elem_count += 1
            else:
                result.append(str(prev_elem_count)+prev_elem)
                prev_elem_count = 1
            prev_elem = i
        result.append(str(prev_elem_count) + prev_elem)
        #print(result)
        return ''.join(result)



    def get_CIGAR_string_at_location(self,e_strand,location):
        cigar_string = []
        e_strand_index = 0
        genome_index = location

        match_count,mismatch_count = 0,0

        while e_strand_index < self.l and genome_index < self.genome_length:
            if e_strand[e_strand_index] == self.genome[genome_index]:
                match_count += 1
                if mismatch_count != 0:
                    cigar_string.append(str(mismatch_count) + 'X')
                    mismatch_count = 0

            elif e_strand[e_strand_index] != self.genome[genome_index]:
                mismatch_count += 1
                if match_count != 0:
                    cigar_string.append(str(match_count) + 'M')
                    match_count = 0

            e_strand_index += 1
            genome_index += 1

        if mismatch_count != 0:
            cigar_string.append(str(mismatch_count) + 'X')
        if match_count != 0:
            cigar_string.append(str(match_count) + 'M')

        return ''.join(cigar_string)

    def is_strand_a_match(self,strand,other_strand,error_max):
        key = strand + ':' + other_strand
        if key in self.strand_cache.keys():
            return self.strand_cache[key]
        is_match = EDIT(strand,other_strand).answer <= error_max
        self.strand_cache[key] = is_match
        return is_match

        #if len(strand) != len(other_strand):
            #return False
        mismatch_error_count, insert_error_count, delete_error_count = 0,0,0
        length_equal = len(strand) == len(other_strand)
        strand_index,other_strand_index = 0,0

        while strand_index < len(strand) and other_strand_index < len(other_strand):
            if strand[strand_index] != other_strand[other_strand_index]:
                if length_equal:
                    mismatch_error_count += 1
                elif len(strand) > len(other_strand):
                    delete_error_count += 1
                    strand_index += 1
                else:
                    insert_error_count += 1
                    other_strand_index += 1
                if mismatch_error_count + insert_error_count + delete_error_count > error_max:
                    return False
            strand_index += 1
            other_strand_index += 1
        return True

    def get_occurences_at_index(self,index):
        occurences = [self.genome[index:index+self.l]]
        if self.insert_delete_mode:
            for i in range(1,self.d+1):
                occurences.append(self.genome[index:index+self.l-1])
                occurences.append(self.genome[index:index + self.l + 1])
        return occurences

    def is_overlap(self,locations,i,consider_ins_del):
        for location in locations:
            location_lower_bound = location if not consider_ins_del else (location - self.d)
            location_upper_bound = location + self.l if not consider_ins_del else (location + self.l + self.d)
            if location_lower_bound <= i <= location_upper_bound:
                return True
        return False

    def get_E_strand(self):
        index_by_strand_dictionary = {}
        occurrences_by_candidate_dictionary = {}
        result = []

        #load e_strand candidates
        for i in range(self.genome_length-self.l + 1):
            candidate = self.genome[i:i+self.l]
            if candidate in index_by_strand_dictionary.keys():
                candidate_locations = index_by_strand_dictionary[candidate]
                if not self.is_overlap(candidate_locations, i, False):
                    index_by_strand_dictionary[candidate].add(i)
                    occurrences_by_candidate_dictionary[candidate][i] = candidate
            else:
                index_by_strand_dictionary[candidate] = {i}
                occurrences_by_candidate_dictionary[candidate] = {}
                occurrences_by_candidate_dictionary[candidate][i] = candidate

        found_n_occurences = False

        #check for occurences
        for i in range(self.genome_length-self.l + 1):
            if (i % 1 == 0):
                print(i)
            occurrences = self.get_occurences_at_index(i)
            for candidate in index_by_strand_dictionary.keys():
                candidate_locations = index_by_strand_dictionary[candidate]

                if not self.is_overlap(candidate_locations,i,self.insert_delete_mode):
                    for occurrence in occurrences:
                        if self.is_strand_a_match(occurrence,candidate,self.d):
                            index_by_strand_dictionary[candidate].add(i)
                            occurrences_by_candidate_dictionary[candidate][i] = occurrence
                            if (len(index_by_strand_dictionary[candidate]) > (self.n)):
                                found_n_occurences = True
                                #print(index_by_strand_dictionary[candidate])
                                print(candidate)
                                print(occurrences_by_candidate_dictionary[candidate])
                                break
                if found_n_occurences:
                    break
            if found_n_occurences:
                break

        #locations = index_by_strand_dictionary[candidate]
        for index in index_by_strand_dictionary[candidate]:
            result.append((index,occurrences_by_candidate_dictionary[candidate][index]))
        #print(result)
        return candidate,sorted(result)


        raise Exception('no candidate found')


def Main():
    n,l,d = 6,23,0
    genome = '''AATGGGACACATGCGCTGGGAGCCTGGTAATAAGCTGATTGAACTACAGATGACCCGCAAATGGAGACCTTTAGGAAAGAGTATCAAGGAAGTTAGGCGACACACGTACGAAGTGCGCCCAGATCTGACTTAAGAAACGTCGGGGTCATTTGGATACTAAGTCAAGCGAGAGCACGACACCCGCATTCGACCAGTGACCGAATGGGACACATGCGCTGGGAGCCTGCGACGTTCGCCGGCGGTAACGGCTTAACGGGGCTTGTTGCTGCTAGTCGGCGATATAGGTCTTCAGTAAAGCCATCTACTGGCCGCTTTTGAATGGTACCGAAGAGCAAAGCAAGTTCATTTGATTATTCTACTGTGGCGATTTCTATTCGTCGTGTTATAACATTGATTGCTCGCGATCGGGCCCGTTAGGCTTACTTCTGCGGAACGTGTTCTCGAAGGGATAGGTGCGAGGTGCGGGGCATGGAATTTTAGTCCTCCCTCTCCAAGCTGGCCGCTCTTCATGTTGTCATTTTTAGAATTTGGGTTGAGGTCCCCGCATAACAAACACTTTGGGACACATGCGCTGGGAGCCTCCAAAGGCAGTAGGCTTGGGGCACATGGGACACATGCGCTGGGAGCCTACAGGAACCGCTCTCACACGGTCCCGAAATTTGCCCGTGTGACCAACAACATCCTTTTATTTGTCGGCTGAAGTCATTGGTAGCGTGTTCACCCTTACGTGCGTAACCCCAGCGCGAATCTTCACCCCTAATAGTGCCGAGTACAGCTGGGTACCCGCTGCCAGATGAATGTACTAAGTCGGAAGGCATCTGTTTATCTGAGGAGCATTGCCTGCGGGCATAAAAATGGGACACATGCGCTGGGAGCCTCTGTTAGTTGCGAACTACGGACATGGTCCGACACTAGAAAGATTTGTATGGAAGCGGATCGAAGCCCCTGCTTCGACTGTACACCCCATGTCCCGTTCTGAACGATGGGACACATGCGCTGGGAGCCTCCGGGCAATTATGACCACAACTTCGGAGGGTTGTAGATCGGATTATTGCGTATCGTCGCAGTTTTTCCACACGGACTATCGTCGTCTAAACTAACCGGGGGGGCTCAGGTGGGACACATGCGCTGGGAGCCTCTG'''

    n,l,d =3,30,1
    genome = '''CTTCTCCCAGACTAGACCATCCTCTTGCTTGCCCCTACTCCCACTCGCGATGTCAGCGTGGAGCGCCGAACGTTTCACAGCTCCATAGGCTAGACCATCCTCTTGCTTGCCCCTACGCCACTGTAGAACGGCTAGACCATCCTCTTGCTTGCCCCTACTAC'''

    n,l,d = 4,10,1
    genome = 'CGCATGCCAGCATTCAACCGAAAATGCAGCATTAAGTGTCTAAAAATGCAGCATTTGTGTTACTTAGTATCAGCATTGCAA'

    n,l,d = 4, 16, 4
    genome = 'CAGATCGCCCATATTCGTGAGCGTAACGCTGGAATAACCGCACAAAAGACTATACGGTAGCGTAACGCTGTGAAGAAAACTTATCATAGATCGCGTAACGCTGTATGTTCTACCATGCACGGTAGCGTAACAGCTGAACTTGATGTCCGAGCTAATATTCAGCCATTCTCATGAATCCGGCGCCACGCATCGAAACAGAA'

    n,l,d = 4,10,3
    genome = 'CGGCCAACCACCCCCACATACCACCGTAGACCACCCTGACCAGGGGGAGGCGGAACACTACCCCCCAATCGGTCCCGTGGCACAATTTCCATACCAAACGCTATTCATGCGTGTATGCTTTGCCCTCCCATACTTACAGTGTATTATGC'

    n,l,d = 3,13,5
    genome = 'CTGAGGCGCTGAGGCGGCCGTGGCGGCGGCGGCGGCGGCGGCGGCAGCGGCGGCCAAGCGGCCAGGTTGGCGGCCGGGGCTCCGGGCCGCGCGAGGCCACGGCCACGCCGCGCCGCTGCGCACAACCAACGAGGCAGAGCGCCGCCCGGCGCGAGACTGCGGCCGAAGCGTGGGGCGCGCGTGCGGAGGACCAGGCGCGGCGCGGCTGCGGCTGAGAGTGGAGCCTTTCAGGCTGGCATGGAGAGCTTAAGGGGCAACTGAAGGAGACACACTGGCCAAGCGCGGAGTTCTGCTTACTTCAGTCCTGCTGAGATACTCTCTCAGTCCGCTCGCACCGAAGGAAGCTGCCTTGGGATCAGAGCAGACATAAAGCTAGAAAAATTTCAAGACAGAAACAGTCTCCGCCAGTCAAGAAACCCTCAAAAGTATTTTGCCATGGATATAGAAGATGAAGAAAACATGAGTTCCAGCAGCACTGATGTGAAGGAAAACCGCAATCTGGACAACGTGTCCCCCAAGGATGGCAGCACACCTGGGCCTGGCGAGGGCTCTCAGCTCTCCAATGGGGGTGGTGGTGGCCCCGGCAGAAAGCGGCCCCTGGAGGAGGGCAGCAATGGCCACTCCAAGTACCGCCTGAAGAAAAGGAGGAAAACACCAGGGCCCGTCCTCCCCAAGAACGCCCTGATGCAGCTGAATGAGATCAAGCCTGGTTTGCAGTACACACTCCTGTCCCAGACTGGGCCCGTGCACGCGCCTTTGTTTGTCATGTCTGTGGAGGTGAATGGCCAGGTTTTTGAGGGCTCTGGTCCCACAAAGAAAAAGGCAAAACTCCATGCTGCTGAGAAGGCCTTGAGGTCTTTCGTTCAGTTTCCTAATGCCTCTGAGGCCCACCTGGCCATGGGGAGGACCCTGTCTGTCAACACGGACTTCACATCTGACCAGGCCGACTTCCCTGACACGCTCTTCAATGGTTTTGAAACTCCTGACAAGGCGGAGCCTCCCTTTTACGTGGGCTCCAATGGGGATGACTCCTTCAGTTCCAGCGGGGACCTCAGCTTGTCTGCTTCCCCGGTGCCTGCCAGCCTAGCCCAGCCTCCTCTCCCTGTCTTACCACCATTCCCACCCCCGAGTGGGAAGAATCCCGTGATGATCTTGAACGAACTGCGCCCAGGACTCAAGTATGACTTCCTCTCCGAGAGCGGGGAGAGCCATGCCAAGAGCTTCGTCATGTCTGTGGTCGTGGATGGTCAGTTCTTTGAAGGCTCGGGGAGAAACAAGAAGCTTGCCAAGGCCCGGGCTGCGCAGTCTGCCCTGGCCGCCATTTTTAACTTGCACTTGGATCAGACGCCATCTCGCCAGCCTATTCCCAGTGAGGGTCTTCAGCTGCATTTACCGCAGGTTTTAGCTGACGCTGTCTCACGCCTGGTCCTGGGTAAGTTTGGTGACCTGACCGACAACTTCTCCTCCCCTCACGCTCGCAGAAAAGTGCTGGCTGGAGTCGTCATGACAACAGGCACAGATGTTAAAGATGCCAAGGTGATAAGTGTTTCTACAGGAACAAAATGTATTAATGGTGAATACATGAGTGATCGTGGCCTTGCATTAAATGACTGCCATGCAGAAATAATATCTCGGAGATCCTTGCTCAGATTTCTTTATACACAACTTGAGCTTTACTTAAATAACAAAGATGATCAAAAAAGATCCATCTTTCAGAAATCAGAGCGAGGGGGGTTTAGGCTGAAGGAGAATGTCCAGTTTCATCTGTACATCAGCACCTCTCCCTGTGGAGATGCCAGAATCTTCTCACCACATGAGCCAATCCTGGAAGGGTCTCGCTCTTACACCCAGGCTGGAGTGCAGTGGTGCAATCATGGCTCACTGCAGCCTCGACCTCCTGGGCTCTTAAGCGATCCTTCCACCTCAACCTTCCAAGGAGCTGGGACTACAGAACCAGCAGATAGACACCCAAATCGTAAAGCAAGAGGACAGCTACGGACCAAAATAGAGTCTGGTGAGGGGACGATTCCAGTGCGCTCCAATGCGAGCATCCAAACGTGGGACGGGGTGCTGCAAGGGGAGCGGCTGCTCACCATGTCCTGCAGTGACAAGATTGCACGCTGGAACGTGGTGGGCATCCAGGGATCCCTGCTCAGCATTTTCGTGGAGCCCATTTACTTCTCGAGCATCATCCTGGGCAGCCTTTACCACGGGGACCACCTTTCCAGGGCCATGTACCAGCGGATCTCCAACATAGAGGACCTGCCACCTCTCTACACCCTCAACAAGCCTTTGCTCAGTGGCATCAGCAATGCAGAAGCACGGCAGCCAGGGAAGGCCCCCAACTTCAGTGTCAACTGGACGGTAGGCGACTCCGCTATTGAGGTCATCAACGCCACGACTGGGAAGGATGAGCTGGGCCGCGCGTCCCGCCTGTGTAAGCACGCGTTGTACTGTCGCTGGATGCGTGTGCACGGCAAGGTTCCCTCCCACTTACTACGCTCCAAGATTACCAAGCCCAACGTGTACCATGAGTCCAAGCTGGCGGCAAAGGAGTACCAGGCCGCCAAGGCGCGTCTGTTCACAGCCTTCATCAAGGCGGGGCTGGGGGCCTGGGTGGAGAAGCCCACCGAGCAGGACCAGTTCTCACTCACGCCCTGACCCGGGCAGACATGATGGGGGGTGCAGGGGGCTGTGGGCATCCAGCGTCATCCTCCAGAACCTCACATCTGAACTGGGGGCAGGTGCATACCTTGGGGAGGGAGTAGGGGGACACGGGGGACCACCAGGTGTCCACGGTTGTCCCCAGCATCTCACATCAGACCTGGGGCAGGTGCGCAGTGTGGGGAGGGGATGGGGTGCGTCAGGGCCCAGCATCGCCGCCTGGCATCTCTCTGCCGCAGCATTTCCCCTTCTGAACCGTCCAGTGACTGCTTTCAATCTCGGTTTACGTTTAGAAATTGAGTTCTACTGAGTAGGGCTTCCTTAAGTTTAGGAAAATAGAAATTACTTTGTGTGAAATTCTTGAATAAATAATTTATTCAGAGCTAGGAATGTGGTTTATAAAATAGGAAGTAATTGTGTCAGGTCACTTTTATGCCACATTATTTTAATTGCAAAAAAGCATCTATATATGGAGGAGGGTGGGAAAATAGAGGTAGGAAATAGTAGCCTAAAGGAAATCGCCACACGTCTGTCTAAACTTAGGTCTCTTTTCTCCGTAGGTACCTCCCTGGGTAGTTCCACACACTAGGTTGTAACAGTCTCTCCCTGAGGAGCAGACTCCCAGCATGGTGTAGCGTGGCCCTGTCATGCACATGGGGTCCCGCAGCAGTGACTGTGTGTCCTGCAGAGGCGTGACCCAGGCCCCTGTAGCCCTCAGCCTCCTCTAGAAGCTTCTGTACTCCTTGTAGGATCAGATCATGGAAAACTTTTCTCAGTTTACTTCTAAGTAATCACAGATAATACATGGCCAGTAATCCCAGGCTGGCCATTCATTCAGGTTTTTTAAAGGATATTTAACTTTTATGGACTAGAAGGAATCACGAGGGCTACTGCACAATACATGGCCTAAGTTCCCTCTGTTCCTTCCTCTGAATCGAATGGATGTGGGTGACCGCCCGAAGGCCTTCACAGGATGGAAGTAGAATGATTTCAGTAGATACTCATTCTTGGAAAATGCCATAGTTTTAAATTATTGTTTCCAGCTTTATCAAAGACATGTTTGAAAAATAAAAAGCATCCAAGTGAGAGCTGGTGAGACCACGTGCTGCTGGCGTAGTGTAGGCCAGACATTGACAGTCCTGACGGGAGCTCAGGGCTGCCCAGCGCCCAGCGTGCACGGGACGGCCCCACGACAGAGGGAGTCAGCCCGGGAGGTCAGGAGCGCGGCGGGCGAGGGCCCTGTGTGGACCACCTCCACCAAGCTCAGAGATTTGCACCAGGTGCCTTGTTGCCTCCGCTCAGGATGAAAGAGGAGCTGAGAGAAGTGCTCTGCCTGCCAGTGCAGTGCCCAGCTCCAAGGCTCTAGAGGGTGTTCAGGTGGGTCTCCTGGGGCCATGGGGAGAGATTGGTGCAGACCTTACCCCACAGCATACACCTGCCACAGCGAAATCCAGGGTGTTGGCACCTGTGTGTCCGTGATGAGCCTAGGAAACCAGAGCAGGGGCAGAGGGGCGTCATCCTCCCACCGGACGCTGGGAGCTCAGACCCCAAAACTGAAACACCGTGGCTTCGGCGGGGGGTGTGCCTCCTGATGTCAGGAGCCCCATCCACGTGTGTCCACACAGATCTCGTCGCAGCACGGCAGGAAGGGGTGCTGCTTAGGGCTCATTGTTGGGGACATGACCGGGTTCAGCGGCTAGAACATCTGCCCCACAGCAGCCTCCTCCTCCACCGAAGAGGGTAGTTGTCTCCCTGAAGCAGTCACAGCAGGCGTCTCTGCCGCTCCGTCACCACAGTGGGGTTTTGTTCAGGCAGATCGCGCTGGGGTTCTGCACCTGCAGAAGGAGAGGGGTCTGTTGTCGCTGGCTTTCCCCCAAGCAGGCTCTTGCACACTCTAGAAAAAACACCTTGTAAGTCTGTGCATTTTTATTGTCTTGATAAATTGTATTTTTTTCTAATGGGGATTGGGAGATGGACTTCGTTTTTAAAAATATGTGGATTTTGGTTACCAAGTTTAGTGTTAATATATTCCATATACATACAAAACTACCCGGTATGTCTGGCTTTTCCCTTCTGTCAGGTAATAGCTAAAGTCAGCATGATTGCTCCCTGTACCACCCCAAATAAGTGAGTGCCTCACCTTGTGGGGCCTGAGCAGCTACCTTGAGACCATGTGAGGTGGCACCTTTCCGGGGTGGACTCGTGCGGCCTTGAGGACAGGCACAGGGCACCCTATCCCAAGCCGTCCAGGCAGGAGGAAGGCAGCCAAGGCAACTGGGTTCTGGGAGCCCTGGGTGGGGCAGCTGTGGGGAGGAACTGGGTTCGGGGAGCCCTGGGCGGGGCGGCTGTTGGGGGGAACTGGGTTCGGGGTGCCCTGGGCAGGGGGCTACTGGGGGGCGGCTGTGAGGAGGAGTTGGGTTCAGGGAGCCCTGGGCGGGGTGGCTGTCAGGGGGAACTGGGTTCCGGGAGCCCTGGGCCGGGGCAGGGGGCGGCTGTAGGAAGGAACTGGTTTCGGGGAGCCCTGGGCGGGGCGGCTGTGGGGAGGAAGGTGACGTGCAGGGGACCAGAGGCTCTGCACTGCTCCTAGGACAGCTCATCTGTAATCAGAAAAAAAATAAACAAAATACAGAACGCTGACTCCTCCGTGAGACAGATCGGGGACCTTAGCACTTTAATCCCTCCCTTCTGAGCGCTCGGTGTGCACTTTTAGACTATAGCTGTTTCATTGACGTGTCACTCTCCATCCAGTGTCCTTGATGTGGCTTTTAGAGACTTAGCAGAAAATTCGACACAAGCAGGAACTTGATTTTTTAAGAAAAAATATTACATTTTGAGGACATTTTGACAAGTAGGGGAAGAGAGGGCTTCTGTTGTTTTGTTTTGTTTTGTTTTGTTAACTAAACCTGAAGTATTAATTCCACAAAGACACTGTCCCTCAGGACCACTCAGGTACAGCTCTGCCAGGGACAGAGTCCTGCTAGTGGGAGGTCTCAGGTGGGGCGGTGTGTTCTGTGCCATGAGGCAGCGACAGGTCCAGATGGATGTCGTCACCACCTTCCTCAGCTCTCATCACCTGGTCGTACGCCAGGCCCACCTCTTCCCAGCAAGGGACGCCAAAGAACTGCAGTTTTTATTCTGAGTCTTAATTTAACTTTTCATCATCTTTTCCTATTTTGGAGAATTTTTTGTAATTAAAAGCAATTATTTTAAAATGTGCAAGCCAGTATCTCACAAGGCATGGATTTCTGTGGAATTTATTTTTATTCAAATAACCATATTTATCTCCAGGCTGTGGAATCGCCACTTTCTTTGTGAAGACAGTGTCTCTCCTTGTAATCTCACACAGGTACACTGAGGAGGGGACGGCTCCGTCTTCACATTGTGCACAGATCTGAGGATGGGATTAGCGAAGCTGTGGAGACTGCACATCCGGACCTGCCCATGTCTCAAAACAAACACATGTACAGTGGCTCTTTTTCCTTCTCAAACACTTTACCCCAGAAGCAGGTGGTCTGCCCCAGGCATAAAGAAGGAAAATTGGCCATCTTTCCCACCTCTAAATTCTGTAAAATTATAGACTTGCTCAAAAGATTCCTTTTTATCATCCCCACGCTGTGTAAGTGGAAAGGGCATTGTGTTCCGTGTGTGTCCAGTTTACAGCGTCTCTGCCCCCTAGCGTGTTTTGTGACAATCTCCCTGGGTGAGGAGTGGGTGCACCCAGCCCCGAGGCCAGTGGTTGCTCGGGGCCTTCCGTGTGAGTTCTAGTGTTCACTTGATGCCGGGGAATAGAATTAGAGAAAACTCTGACCTGCCGGGTTCCAGGGACTGGTGGAGGTGGATGGCAGGTCCGACTCGACCATGACTTAGTTGTAAGGGTGTGTCGGCTTTTTCAGTCTCATGTGAAAATCCTCCTGTCTCTGGCAGCACTGTCTGCACTTTCTTGTTTACTGTTTGAAGGGACGAGTACCAAGCCACAAGAACACTTCTTTTGGCCACAGCATAAGCTGATGGTATGTAAGGAACCGATGGGCCATTAAACATGAACTGAACGGTTAAAAGCACAGTCTATGGAACGCTAATGGAGTCAGCCCCTAAAGCTGTTTGCTTTTTCAGGCTTTGGATTACATGCTTTTAATTTGATTTTAGAATCTGGACACTTTCTATGAATGTAATTCGGCTGAGAAACATGTTGCTGAGATGCAATCCTCAGTGTTCTCTGTATGTAAATCTGTGTATACACCACACGTTACAACTGCATGAGCTTCCTCTCGCACAAGACCAGCTGGAACTGAGCATGAGACGCTGTCAAATACAGACAAAGGATTTGAGATGTTCTCAATAAAAAGAAAATGTTTCACTACTCAAAAAAAAAAAAAAAAA'

    n,l,d = 3,42,6
    genome = 'CTGAGGCGCTGAGGCGGCCGTGGCGGCGGCGGCGGCGGCGGCGGCAGCGGCGGCCAAGCGGCCAGGTTGGCGGCCGGGGCTCCGGGCCGCGCGAGGCCACGGCCACGCCGCGCCGCTGCGCACAACCAACGAGGCAGAGCGCCGCCCGGCGCGAGACTGCGGCCGAAGCGTGGGGCGCGCGTGCGGAGGACCAGGCGCGGCGCGGCTGCGGCTGAGAGTGGAGCCTTTCAGGCTGGCATGGAGAGCTTAAGGGGCAACTGAAGGAGACACACTGGCCAAGCGCGGAGTTCTGCTTACTTCAGTCCTGCTGAGATACTCTCTCAGTCCGCTCGCACCGAAGGAAGCTGCCTTGGGATCAGAGCAGACATAAAGCTAGAAAAATTTCAAGACAGAAACAGTCTCCGCCAGTCAAGAAACCCTCAAAAGTATTTTGCCATGGATATAGAAGATGAAGAAAACATGAGTTCCAGCAGCACTGATGTGAAGGAAAACCGCAATCTGGACAACGTGTCCCCCAAGGATGGCAGCACACCTGGGCCTGGCGAGGGCTCTCAGCTCTCCAATGGGGGTGGTGGTGGCCCCGGCAGAAAGCGGCCCCTGGAGGAGGGCAGCAATGGCCACTCCAAGTACCGCCTGAAGAAAAGGAGGAAAACACCAGGGCCCGTCCTCCCCAAGAACGCCCTGATGCAGCTGAATGAGATCAAGCCTGGTTTGCAGTACACACTCCTGTCCCAGACTGGGCCCGTGCACGCGCCTTTGTTTGTCATGTCTGTGGAGGTGAATGGCCAGGTTTTTGAGGGCTCTGGTCCCACAAAGAAAAAGGCAAAACTCCATGCTGCTGAGAAGGCCTTGAGGTCTTTCGTTCAGTTTCCTAATGCCTCTGAGGCCCACCTGGCCATGGGGAGGACCCTGTCTGTCAACACGGACTTCACATCTGACCAGGCCGACTTCCCTGACACGCTCTTCAATGGTTTTGAAACTCCTGACAAGGCGGAGCCTCCCTTTTACGTGGGCTCCAATGGGGATGACTCCTTCAGTTCCAGCGGGGACCTCAGCTTGTCTGCTTCCCCGGTGCCTGCCAGCCTAGCCCAGCCTCCTCTCCCTGTCTTACCACCATTCCCACCCCCGAGTGGGAAGAATCCCGTGATGATCTTGAACGAACTGCGCCCAGGACTCAAGTATGACTTCCTCTCCGAGAGCGGGGAGAGCCATGCCAAGAGCTTCGTCATGTCTGTGGTCGTGGATGGTCAGTTCTTTGAAGGCTCGGGGAGAAACAAGAAGCTTGCCAAGGCCCGGGCTGCGCAGTCTGCCCTGGCCGCCATTTTTAACTTGCACTTGGATCAGACGCCATCTCGCCAGCCTATTCCCAGTGAGGGTCTTCAGCTGCATTTACCGCAGGTTTTAGCTGACGCTGTCTCACGCCTGGTCCTGGGTAAGTTTGGTGACCTGACCGACAACTTCTCCTCCCCTCACGCTCGCAGAAAAGTGCTGGCTGGAGTCGTCATGACAACAGGCACAGATGTTAAAGATGCCAAGGTGATAAGTGTTTCTACAGGAACAAAATGTATTAATGGTGAATACATGAGTGATCGTGGCCTTGCATTAAATGACTGCCATGCAGAAATAATATCTCGGAGATCCTTGCTCAGATTTCTTTATACACAACTTGAGCTTTACTTAAATAACAAAGATGATCAAAAAAGATCCATCTTTCAGAAATCAGAGCGAGGGGGGTTTAGGCTGAAGGAGAATGTCCAGTTTCATCTGTACATCAGCACCTCTCCCTGTGGAGATGCCAGAATCTTCTCACCACATGAGCCAATCCTGGAAGGGTCTCGCTCTTACACCCAGGCTGGAGTGCAGTGGTGCAATCATGGCTCACTGCAGCCTCGACCTCCTGGGCTCTTAAGCGATCCTTCCACCTCAACCTTCCAAGGAGCTGGGACTACAGAACCAGCAGATAGACACCCAAATCGTAAAGCAAGAGGACAGCTACGGACCAAAATAGAGTCTGGTGAGGGGACGATTCCAGTGCGCTCCAATGCGAGCATCCAAACGTGGGACGGGGTGCTGCAAGGGGAGCGGCTGCTCACCATGTCCTGCAGTGACAAGATTGCACGCTGGAACGTGGTGGGCATCCAGGGATCCCTGCTCAGCATTTTCGTGGAGCCCATTTACTTCTCGAGCATCATCCTGGGCAGCCTTTACCACGGGGACCACCTTTCCAGGGCCATGTACCAGCGGATCTCCAACATAGAGGACCTGCCACCTCTCTACACCCTCAACAAGCCTTTGCTCAGTGGCATCAGCAATGCAGAAGCACGGCAGCCAGGGAAGGCCCCCAACTTCAGTGTCAACTGGACGGTAGGCGACTCCGCTATTGAGGTCATCAACGCCACGACTGGGAAGGATGAGCTGGGCCGCGCGTCCCGCCTGTGTAAGCACGCGTTGTACTGTCGCTGGATGCGTGTGCACGGCAAGGTTCCCTCCCACTTACTACGCTCCAAGATTACCAAGCCCAACGTGTACCATGAGTCCAAGCTGGCGGCAAAGGAGTACCAGGCCGCCAAGGCGCGTCTGTTCACAGCCTTCATCAAGGCGGGGCTGGGGGCCTGGGTGGAGAAGCCCACCGAGCAGGACCAGTTCTCACTCACGCCCTGACCCGGGCAGACATGATGGGGGGTGCAGGGGGCTGTGGGCATCCAGCGTCATCCTCCAGAACCTCACATCTGAACTGGGGGCAGGTGCATACCTTGGGGAGGGAGTAGGGGGACACGGGGGACCACCAGGTGTCCACGGTTGTCCCCAGCATCTCACATCAGACCTGGGGCAGGTGCGCAGTGTGGGGAGGGGATGGGGTGCGTCAGGGCCCAGCATCGCCGCCTGGCATCTCTCTGCCGCAGCATTTCCCCTTCTGAACCGTCCAGTGACTGCTTTCAATCTCGGTTTACGTTTAGAAATTGAGTTCTACTGAGTAGGGCTTCCTTAAGTTTAGGAAAATAGAAATTACTTTGTGTGAAATTCTTGAATAAATAATTTATTCAGAGCTAGGAATGTGGTTTATAAAATAGGAAGTAATTGTGTCAGGTCACTTTTATGCCACATTATTTTAATTGCAAAAAAGCATCTATATATGGAGGAGGGTGGGAAAATAGAGGTAGGAAATAGTAGCCTAAAGGAAATCGCCACACGTCTGTCTAAACTTAGGTCTCTTTTCTCCGTAGGTACCTCCCTGGGTAGTTCCACACACTAGGTTGTAACAGTCTCTCCCTGAGGAGCAGACTCCCAGCATGGTGTAGCGTGGCCCTGTCATGCACATGGGGTCCCGCAGCAGTGACTGTGTGTCCTGCAGAGGCGTGACCCAGGCCCCTGTAGCCCTCAGCCTCCTCTAGAAGCTTCTGTACTCCTTGTAGGATCAGATCATGGAAAACTTTTCTCAGTTTACTTCTAAGTAATCACAGATAATACATGGCCAGTAATCCCAGGCTGGCCATTCATTCAGGTTTTTTAAAGGATATTTAACTTTTATGGACTAGAAGGAATCACGAGGGCTACTGCACAATACATGGCCTAAGTTCCCTCTGTTCCTTCCTCTGAATCGAATGGATGTGGGTGACCGCCCGAAGGCCTTCACAGGATGGAAGTAGAATGATTTCAGTAGATACTCATTCTTGGAAAATGCCATAGTTTTAAATTATTGTTTCCAGCTTTATCAAAGACATGTTTGAAAAATAAAAAGCATCCAAGTGAGAGCTGGTGAGACCACGTGCTGCTGGCGTAGTGTAGGCCAGACATTGACAGTCCTGACGGGAGCTCAGGGCTGCCCAGCGCCCAGCGTGCACGGGACGGCCCCACGACAGAGGGAGTCAGCCCGGGAGGTCAGGAGCGCGGCGGGCGAGGGCCCTGTGTGGACCACCTCCACCAAGCTCAGAGATTTGCACCAGGTGCCTTGTTGCCTCCGCTCAGGATGAAAGAGGAGCTGAGAGAAGTGCTCTGCCTGCCAGTGCAGTGCCCAGCTCCAAGGCTCTAGAGGGTGTTCAGGTGGGTCTCCTGGGGCCATGGGGAGAGATTGGTGCAGACCTTACCCCACAGCATACACCTGCCACAGCGAAATCCAGGGTGTTGGCACCTGTGTGTCCGTGATGAGCCTAGGAAACCAGAGCAGGGGCAGAGGGGCGTCATCCTCCCACCGGACGCTGGGAGCTCAGACCCCAAAACTGAAACACCGTGGCTTCGGCGGGGGGTGTGCCTCCTGATGTCAGGAGCCCCATCCACGTGTGTCCACACAGATCTCGTCGCAGCACGGCAGGAAGGGGTGCTGCTTAGGGCTCATTGTTGGGGACATGACCGGGTTCAGCGGCTAGAACATCTGCCCCACAGCAGCCTCCTCCTCCACCGAAGAGGGTAGTTGTCTCCCTGAAGCAGTCACAGCAGGCGTCTCTGCCGCTCCGTCACCACAGTGGGGTTTTGTTCAGGCAGATCGCGCTGGGGTTCTGCACCTGCAGAAGGAGAGGGGTCTGTTGTCGCTGGCTTTCCCCCAAGCAGGCTCTTGCACACTCTAGAAAAAACACCTTGTAAGTCTGTGCATTTTTATTGTCTTGATAAATTGTATTTTTTTCTAATGGGGATTGGGAGATGGACTTCGTTTTTAAAAATATGTGGATTTTGGTTACCAAGTTTAGTGTTAATATATTCCATATACATACAAAACTACCCGGTATGTCTGGCTTTTCCCTTCTGTCAGGTAATAGCTAAAGTCAGCATGATTGCTCCCTGTACCACCCCAAATAAGTGAGTGCCTCACCTTGTGGGGCCTGAGCAGCTACCTTGAGACCATGTGAGGTGGCACCTTTCCGGGGTGGACTCGTGCGGCCTTGAGGACAGGCACAGGGCACCCTATCCCAAGCCGTCCAGGCAGGAGGAAGGCAGCCAAGGCAACTGGGTTCTGGGAGCCCTGGGTGGGGCAGCTGTGGGGAGGAACTGGGTTCGGGGAGCCCTGGGCGGGGCGGCTGTTGGGGGGAACTGGGTTCGGGGTGCCCTGGGCAGGGGGCTACTGGGGGGCGGCTGTGAGGAGGAGTTGGGTTCAGGGAGCCCTGGGCGGGGTGGCTGTCAGGGGGAACTGGGTTCCGGGAGCCCTGGGCCGGGGCAGGGGGCGGCTGTAGGAAGGAACTGGTTTCGGGGAGCCCTGGGCGGGGCGGCTGTGGGGAGGAAGGTGACGTGCAGGGGACCAGAGGCTCTGCACTGCTCCTAGGACAGCTCATCTGTAATCAGAAAAAAAATAAACAAAATACAGAACGCTGACTCCTCCGTGAGACAGATCGGGGACCTTAGCACTTTAATCCCTCCCTTCTGAGCGCTCGGTGTGCACTTTTAGACTATAGCTGTTTCATTGACGTGTCACTCTCCATCCAGTGTCCTTGATGTGGCTTTTAGAGACTTAGCAGAAAATTCGACACAAGCAGGAACTTGATTTTTTAAGAAAAAATATTACATTTTGAGGACATTTTGACAAGTAGGGGAAGAGAGGGCTTCTGTTGTTTTGTTTTGTTTTGTTTTGTTAACTAAACCTGAAGTATTAATTCCACAAAGACACTGTCCCTCAGGACCACTCAGGTACAGCTCTGCCAGGGACAGAGTCCTGCTAGTGGGAGGTCTCAGGTGGGGCGGTGTGTTCTGTGCCATGAGGCAGCGACAGGTCCAGATGGATGTCGTCACCACCTTCCTCAGCTCTCATCACCTGGTCGTACGCCAGGCCCACCTCTTCCCAGCAAGGGACGCCAAAGAACTGCAGTTTTTATTCTGAGTCTTAATTTAACTTTTCATCATCTTTTCCTATTTTGGAGAATTTTTTGTAATTAAAAGCAATTATTTTAAAATGTGCAAGCCAGTATCTCACAAGGCATGGATTTCTGTGGAATTTATTTTTATTCAAATAACCATATTTATCTCCAGGCTGTGGAATCGCCACTTTCTTTGTGAAGACAGTGTCTCTCCTTGTAATCTCACACAGGTACACTGAGGAGGGGACGGCTCCGTCTTCACATTGTGCACAGATCTGAGGATGGGATTAGCGAAGCTGTGGAGACTGCACATCCGGACCTGCCCATGTCTCAAAACAAACACATGTACAGTGGCTCTTTTTCCTTCTCAAACACTTTACCCCAGAAGCAGGTGGTCTGCCCCAGGCATAAAGAAGGAAAATTGGCCATCTTTCCCACCTCTAAATTCTGTAAAATTATAGACTTGCTCAAAAGATTCCTTTTTATCATCCCCACGCTGTGTAAGTGGAAAGGGCATTGTGTTCCGTGTGTGTCCAGTTTACAGCGTCTCTGCCCCCTAGCGTGTTTTGTGACAATCTCCCTGGGTGAGGAGTGGGTGCACCCAGCCCCGAGGCCAGTGGTTGCTCGGGGCCTTCCGTGTGAGTTCTAGTGTTCACTTGATGCCGGGGAATAGAATTAGAGAAAACTCTGACCTGCCGGGTTCCAGGGACTGGTGGAGGTGGATGGCAGGTCCGACTCGACCATGACTTAGTTGTAAGGGTGTGTCGGCTTTTTCAGTCTCATGTGAAAATCCTCCTGTCTCTGGCAGCACTGTCTGCACTTTCTTGTTTACTGTTTGAAGGGACGAGTACCAAGCCACAAGAACACTTCTTTTGGCCACAGCATAAGCTGATGGTATGTAAGGAACCGATGGGCCATTAAACATGAACTGAACGGTTAAAAGCACAGTCTATGGAACGCTAATGGAGTCAGCCCCTAAAGCTGTTTGCTTTTTCAGGCTTTGGATTACATGCTTTTAATTTGATTTTAGAATCTGGACACTTTCTATGAATGTAATTCGGCTGAGAAACATGTTGCTGAGATGCAATCCTCAGTGTTCTCTGTATGTAAATCTGTGTATACACCACACGTTACAACTGCATGAGCTTCCTCTCGCACAAGACCAGCTGGAACTGAGCATGAGACGCTGTCAAATACAGACAAAGGATTTGAGATGTTCTCAATAAAAAGAAAATGTTTCACTACTCAAAAAAAAAAAAAAAAA'

    n,l,d = 4,65,10
    genome = 'ATGTGGGGTCGCATGGAGGTGACTGCGGGTGCCAGGGAACCAGGGCGCCGTTCCTTAGGAACTACGTACGCATATCTATGTAAAGTGATTGACGGATAATTAACTATCTACAAACTGCAAATGCCACCCAACCACCCCGCCGTTCCTTAGGAACTACGTACGCATATCTATGTAAGTGATTTCTCGTTGACGTACGATACCAGTTGGATTTCCGAGATTCGTTAATCGTAGCATCACTACGCATGTACACTTGCATCTGACTTGTAGAGTGCGGGTGCCAGGGAACCAGGGCGCCGTTCCTTAGGAACTACGTACGCATATCTATGTAAGTGATATAGTTATGTGTTAAAGACGAAATGTGGCATAGTAAGGGCACGTCGCCCCAGGTCGTACATGCGGGTGCCAGGGAACCAGGGCGCCGTTCCTTAGGAACTACGTACGCATATCTATGTTTGTGATCCCGACGGAGTAATTACAGCACAAGATAGCAGTCTGTTCAGTCGTGAATAACGGGCATTACTTCCTGTGAGCCCCTACCATGCTATAGCGGGCTAACCGCCTTCACCCGGACAGAGTCTTAAGGTTTCACAAGTACGTCTTCTACTACCTAGATCACCTTGGCGGCGTGTGCAGAGCATGGTTGGCGCGACTAAGTGATTTTCAAAACTCTCGATGGCGGACTGTGTGCTTCACTAACCGATTGCCGACATCTTCGCTTAGTGTTGAGCGCGCTCGCTACAGACTTAGACGATGAGTGGTCCGGAATCCGGCTATCTACTCAGGCCGGCAATCATCATTCGTGGGCAGGAACTTAGTAGAACCCGACCAAGTACAAGCTTAGAGTTGGTAAGCAAGTGCAACAGTACACCGCTCCCAGTGGGAGTTTAGAAACACCGATCGCTACCCATACTTTACAGACGGAATCATGAACCGATGGGACCCCTGATTTGACGCTGTGGCCCCAGTTGTTTCACACGTAACACTTAATCATTATGCCTCAATAATGCGGCCTAGTAAGATTCTCAACTCGCACGAATATTCGAAGAGCGATGCGCGATCAAGAAGAAAAGGCTCGTTCCCGGAAGACTAGACTTGGTAACCTGAATAGGCATTTATAACGGCGAATGATGAGACGCTGGTGCACTATAAACACTGTTATAGTAGGAACGCAGAATATGTGGCCGCCTCTCGTATCCTTGGGGCCTAGGAATAGCCACTACGACGGCTTCGCGCAACTGTCAGACTGGTGAGTGACGAATGTTCAAGCACTAAAAAGGCTGAGACTATGTTTAGTAAGTGAATTGGGACTAACCTTTGACTTGGTGTGTTGGAGGAATCTACTAGTGTCACGCCTGGTTCGAAAAATTCAAAATATGTACATGTTGCTGCGAAATCTGCGGTTAAACCAAGGCAGAACAGGTGGCAACAGGACTCAAGGCGAACCGATCTACACATCCGTGCCCTCATAGTATCCGTTGGGTATTGCAACGGACCGCAAGTTAGTAAAGGATCTCTGGTGCTACTGATTGTATTCTTACATCTCTTATGCCCTTAGGATCCGATGTCGTAGCCAGCGACGACAGTCGCAAGGTGCCCGGCATGGGGCGACTGTTCATACACTGCTGCGCACTGCTAGTATTCAGCTGAGACA'

    n,l,d = 5,22,5
    genome = 'CCCCCGGACCCTGCTGAATTCAAGCATTTCCTGTGGGGGAGGTGTGACGATGCAGCGCGAACGCATTTCCTGTGCGGGGAGGATCACCTTTCTGAGCGGGCCAGTGCACACGTCGGTCTAGTAAGCCAAGCATTTTTTCCTGTGGGAGGGCCTTAGGCCGGGCCTTTACACAGTCTCGGGAATACGGTAACGCTACTTTAGGATCACCCCGCATTTTGTGGGGGGAGGAACCCCCGAGGTTGCAGGTTAGTTTGGACAGGATCCTGTGGCGTCAGCGCACTCGAAAGAATCCTATGTGCCGTGGATGGCTCAGGCGCTCACGGGCTAGCGGGATCCGAGTTAGACCAATCCGTCTGAACTGTCCTGTTTGAGTGCTAGTATTTAATAATGGTGTTGCATCGCCAATATGGGATAGCTAGTTATGGACATGGCCGCAGTAGTTCCGTAGTCTGCGGTCGGCAATCATTATGAACGTACCATTGGAGCACCCCTTCCGTGCTGTTCCTCTCTGACACCCCTTTCGACTCAGATACACGTTACATCGCTCAAGTCGCCGGCCCGTGACGAGTGATAAGACTCCTGACTATTTACACGGGATCTAGCGTTTTCATTTATTCTCGGTACAACGGAACAGCACTAGAAGGGACAGCTACGGTGAAAAGGAGCACGAATACTGAGGAGTACACACCCACGACAGTGACGTACCGTCCGTGCAGTACAAGCAAGCCAGTAACCCGGCGCCGTTGGCAACAGTAAGTTGCTCTACTCGTCTATGTTCTGTTGTAGGTATCTGACTAATACGAGTAATGCTGCCGCATGATACAGTGATCCATGCTATCTCAAATTGTGGCCTCTTGTTTAGTCGCGTTAGGGTCAACCTTCAATTGCATACCCCCACAGCAGGTGAGGGAGGCCCCGTTCATTATGTAGAATGTCCCGCGCGTCGGTGTCGGAAAGCATCGGTCCTATGCCCTTATGCATTCACAACGCTGTATCTGCGCTGGCTTCCTAAGCGAAGAACAACAAAATAGTGACCTTTTAAAGACATTCGGCAACGTCGGCGATAGCCGCTAAGTTGCCGGATATCTTTTTGTCCTACGCTGGTCAAGTCACGCCCCATCATGAGCCATTTTTTATTCTAGCAGCGGCGCGAAGACACCCTTCCTACGCTACACGTATTATAGATTTTAGTGTTGAAGTCAGTATATTTGTTAGGTCTCTCGATTTACAGAAAAACAACTAAGTTGACCGGACGGAGAAATAGGCCGGGATTGGAGTTGAACTGCTTACGCGCGTGATCTCATAAAGGGTTAAGGCATCCTTGTCAGGAGTAGTCTACCTGGGATCTATCGGGTGGCCGCGTCTGCTTGTGGAGTGCTAATCGATTTGGTCAAAAATTCGATCAATGAATCAACCCATGTGGGCGGGCTCCCAATAATCTGTGACCAAGCATTTCCTGTGGGGGAGG'
    transpose = TRANSPOSE(n,l,d,genome,True)


if __name__ == '__main__':
    Main()