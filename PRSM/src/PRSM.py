import os
import sys,difflib
sys.path.insert(0,'C:\\Users\\Matthew\\Desktop\\Python Projects\\Rosalind\\')

from RUtils.src.RosalindUtilities import RosalindUtilities
from collections import Counter

class PRSM():
    def __init__(self,n,strings,R):
        self.n = n
        self.strings = strings
        self.R = R
        self.ru = RosalindUtilities()
        self.get_max_multiplicity_string()

    def get_multiplicity_of_string(self,s):
        mink_diff = []
        weights = self.get_weights_of_prefixes_and_suffixes(s)
        #print(weights)
        for weight in weights:
            for r_value in self.R:
                #print(weight,r_value,r_value-weight)
                mink_diff.append(round(r_value - weight,4))
        return Counter(mink_diff).most_common(1)[0][1]

    def get_weights_of_prefixes_and_suffixes(self,s):
        weights = []
        for i in range(0,len(s)):
            prefix = s[:i]
            suffix = s[i:]
            prefix_weight = sum([self.ru.monoisotropic_mass_by_aa_code[aa] for aa in prefix])
            suffix_weight = sum([self.ru.monoisotropic_mass_by_aa_code[aa] for aa in suffix])
            weights.append(prefix_weight)
            weights.append(suffix_weight)
        return weights

    def get_max_multiplicity_string(self):
        max_multiplicity = 0
        max_multiplicity_string = ''
        for string in self.strings:
            multiplicity = self.get_multiplicity_of_string(string)
            if multiplicity > max_multiplicity:
                max_multiplicity = multiplicity
                max_multiplicity_string = string
        self.max_multiplicity_count= max_multiplicity
        self.max_multiplicity_string = max_multiplicity_string


def Main():
    n = 17
    strings = '''SDGESRQRQLVCQLAGKHGFTDREIGSFMSKPHKTKRRCNHMTCDPHQAMHREHLWSIRWVILLMEFPDPQRELMMPGPPVVLQSKKCYHDDCGCVSMMRVTFDFGGVSRCTAERDCAG
WCWDLGLVSSEFCEMPLLFEYLGEVVIQGDGFALTPMYERHWMCHDEGSCEQCLIHWVHVITCHCLCTHFEQFIKCVPWNRATWKPEDWEWLCQRHGNHNLSKQVHQHFQHWNTDVEAPNWPW
MHYSLPFQMPYFGCHTARMFLRCYGHLIAEPNYAEWYKDSWREIKDKGEHKFRGPITVQHGPRVQYGWIDRFKMHAITDLDFQKAFCEAKSYHLWNKDLMMCHLHMWIAGRQKMGNGHTWNHMDYPGNGVYAI
GLMCDNVKDVKVLTHWIAVWQDTKGCWDERNRWAPEGATVNAPVMGQYYYGMVAAYCFDRKPMNGAVNLVQFMMKDCVYLYGCIWTRLEGGTWHVKHPKPSTKITSHIQVSCIGAYDQNVL
QTEVGFQSRHTRNWIDLHKDGLTNSSMMQENYENQKMPFVYSPWFCRNKRGSWYSYYDFIKYGLDFQCVSRMIPMKCDQYCNTEDDTMMRTCHEFPLNDYVKMGERFPNFTRCVYERDQVQNRMVKNPVMRQRRAVCCKRWGIY
FDHPQKTGQTWGQAYIAAADHMRYTAILDEHFEVRMVTCQAICREPQCDMYPKIIDDYCMPLYGTMADFCCTKFFHIAWETCARCDNKPEPSCPPKNWGQCIRPPDCRTYMQPFFTHQ
EEMILQGSPREQAQCVYWVDCPMRKNCSAEFNTFMPSCTINIMFRNMVRNNMKFCNLLGFPVFTYPWTQKISDINCVSTFNHVWKIKVAAFYAKPKDSHRPGWQCHKPQHTKMIHPNHGLQNLEA
KQQKSIQPKFGSVSWTVETFPIISVNNHKSGRSTFHMWFILFTTVFFPSFVSDYPSANATEMFVKGFCWPYFCGKPRYNPYPCERWATRLYMLDAEIAYSINWLIQLKSSDLANFRKNNEGMAASSLN
DGFGHEWFKHKWLQRCRLIGPTLAYANYMAIKWHENEKLLPPQCCGITIEPNLFVPEKWEQHWVPETLLPRFHFMKSNTMNGPKFYKIIARTCGWGPENLGSWEIGSDAM
SGMFSDTKYGQNMAERTKRVPGNFYMVDNHEHKRTCTKFSTHSCSKCHLDQFSRMTLEWDEQDSMHCMCGGKQSCDTNSAYRSKIGETPPSVGVLMEMMKDIKGWFQHWNKLMISNY
NRQETCFMTMQPMRYYWVPSCKQSTELQRPQCRRNFMNDPPADDLDEEGWCSDDDNAVRLVARMNINNIKYKSWLDHTDIFEPWWKIKDNYGKGTSYSSENHAGNLLAWIVTQEPPFHRNQSRGSNGEHDRVIKTVRR
LHRSMQCWTFTCERRFHQNSTHPMWQPMYIRTYEPSDHVHAMPRDHHSRYADQAWLERNLTDVACDLMWKNCMRFEWPISIDDMHQDHQNEKCYICKDELFQQQVQNTLRTSDCPKHKNVENSSGTTHHPQFGWYEWNLNER
IGLHDRWHHDDHNAKLSISGQWESMWHEWRQRAVYNQHANGRYFTMWKTKIKIDKPLWVSVRWSYCCILQSSPNSQTLNMEVDMATTDWPPGLSYLGFCLVKFIYFGTIMVKKWLYVPCNK
HMHSMHNNCWSKAARMFAQNMMNDIIGPCWQIYTNAYEMTWMIQNTKDEMYCYWVLWLFLLKLWQKASRVNFESAPWRDICHVYGDFLMRGYTAFWPTCMYQTYSIMCPSVHKRSTDYQCQGRAMNNCEIS
YPSCLYYNFPEWMGPNTEGDGHIINIFDKIFKHPYTPCQDEHPYYWMGQCQFPERDGNAYEKNPPEYYCWDDRGRFLVLFRYNTWAYQYQEYNKPCNIRRQLEYKQHPMQIGGHEKTVN
WVSTFEFDPPNDAGYWIHPPVGTTTKKWGVASNSHTGKWGMLAVANGSMLYVELDTHSMPREFGMMSEFERNNTVALCYKHHNFPIWEHIAHYSCGSWVELTTKWHTYWWWDWW
NDLNCTHYYLHCPCQEANQEQPHCRVYIIQCACKQLASTEHIHYSNRFKYCRMGDGAHSPYMLCVIQRYDIMNHIQDRNCDSCQTPHTMAIQSNGVFVKSEVMAHFKYKWLHRGQSPFLCI'''.split('\n')
    R = list(map(float, '''11290.43363
4700.06643
7532.57816
1414.53468
5900.97076
8661.06262
4674.37762
852.3501
3629.65144
9186.62531
9359.66056
5299.31859
4822.38507
2952.29215
7318.3929
6912.22884
3764.98357
4049.13202
4143.9418
3992.11056
8772.14542
1227.58117
1310.59338
1861.01428
6417.03231
10859.16116
8331.61824
632.2779
518.21589
3281.48466
3274.5052
6662.13348
7242.34639
3912.65076
9638.56015
2076.10489
1008.66685
4371.27097
8899.33759
6543.85825'''.split('\n')))
    n = 20
    strings = '''FHRGCWTNMHDPQLIPCLDTERWFGWPYLHTKFWIKIYWVVNPETIIHLFMYLCLMFADVLDIPISRPWKKAHNACEYQGGMFQVYYATAGCPQFHDDESMHESQECPFLMFAPLKGVSVTREHHAISTTHEPNHVTHQCIH
EYDDIPVMRQGNVSIHQAMVMNITHLDFYVIPELKMERTTWEQVHAMFKPSDYMGQIADGFQNGQMRQDNGFKDKEYQPCGCQRSMWMFMIVRDLYAFQFSISAKAIRRMAMTWQHSCSDTTCCFWGETIIGLDAFSHHEK
RFQPFFCGEFPGLRIKIHPNWHDDIFSETPHMYIHNILHSSVGVWFTQIFYKGEWRRYYIMCVPVNMWIMHGWRCHFGLMEEQSTWPANPYMCMFCWKQDYEEKNADQLYYWCNPTWDPREHPSQEHNRSIPPPN
TCMEYSKFHAHRALCPQATYSIEKSNGFNGRGPDIREQNGWADERPFLFMVGDWKWNKLQFMGQCHHVFIKERSRDIAPLANKHMLDGYTHDQNDHVWNFWCPSMQKAFIMRWRQNAGPQRVMTAMW
KPAGCNQICSHHASGRSPSGEWAFGDMDQWSYTYDMDLCGWLWKEWFCYTFCDRKCQWCSPKYMQEFPAARPMVWIGTHNAITSESMCIAGHKFVMDTCHWEIMQSCRFWMPLVYI
QVEPGFPIHAPIGEPKWCSKIYTWPDKNIHCCHVMLYCLLGNYRYWHYTQKKFHYPKIPQIHNFKFHREMKQPQVADAGQHYYRKGVRKTAFRRYWISKDEWASWVLQPGWG
CLCGFQPITRIIMWSYFFRVTACAPMDVFLSVQTQLFDGVIEMQWAKLFIGMWHTVSTSCDQTANSTYMKIERDWEWMDDVMGIRAYIPRNMRLHYNRFKVIWKMACRTSVGICSEAMA
PTCQQFDNSQCQPEMSTSGKMQVHTCQARGMVVVWCGCSTPQCWNQQVWDSMMIVAIACEWLSPMVMPIMGQMKAGDADQFLMVFSVSRLLWDQPQHFYDKEFPHLRGATEKGLRDKETCIFIQQQPR
HCYMNENKMFVDMEMFYNKFFETLDVPMAMIICWMTQFPCIIAHVCRCHCQDHMRWWARYMKEEYCEFKRLNKCCQYVECEVGTYAKAEVARQWYQIIQEKSLDIICNAMYVHQ
ARPNVPRMSVDKFFFWNAHRQGQLDILQHHNAGTKPHIEHLEELESDCGEEMSKRHQLQYFMEKSLPHKPCESNLRRFWWDIYHLVGDRAQIRYQEISSPHVVEWPYEWFKRKCVYEIQC
LDSEILNRNASEGHMQYQWMPQHPSPNPWMCGKVDDIAFHHLGVPSTWGVSRFTSMPLIMLLAWPHKQGCNIVQFVNAWDQKCLLWADMESSSPMIKNPMAQSDAQISTMQIHKQPTIDNFMNYFFDRWPGREK
TVNYCFRSMTTCFLRFHMDHTIELACWPSYMNRSLKFCFQAPADYPVSYMNTGAHHYSYYCNEMHLSCSFHHCSTMDGFKKLGGKLVAVVYWSIEALTDTYAAHDCNCQHVEWERRMTT
MAVDETFSYNEYIQASAESCKKLEYPWNVPIYLVDGLDMKRCLTQVDNEHLMNTHENSHPHNSSMNPANCLQESVWSSHPRYYGGVERKDRIWFVPWSMVIPRKNDHYWRWEKVKDCDVLIQSHFLPPTP
IQFPFIILKDWDGICFQHGIVPWRELQYLDEPQMGFDKDGEQKPGQKFLSTAPQHTPEEPMGVCMPWCLDKNFSVWETFADGRPKQMMSSWCKWCNRLQYGMWYLDIGAIGWMHTYYEKAWVLR
KYEGLVEPEFALWKNRDAHNEEQLLFRANYVFKASIWEEAEYHAQAKLNMFYYTKGRGDKETQVDVSCVMSLSLRNWCWVHCVPMWPHFSWEFHNEPETHSIHNEEQPKGMHIDTLQMGNHVI
QHHGIACGNEWMDSVNGVRDMVHGWRYGVRHNHGRCPRTNEMKDMTSDAISHECSFRQRDSPMSCMRRKVIYAFYKKWVVMQYAWRNEVKVFYPESIWYGCTVKSWFQMKCGEYNNMTIRVQDHRMVVLLRGNYFGAHTPRFEL
ERVRWIIYKNSHREKAEKVKMGQMFHWYNGIYKKEEQQWPNGKCMERSFPCRALIDQRSNPRSQFDVMRSWGNIDRFASWFGLICHICGGRWFIIDDGDTAHEPNTQNMGEVWCPANSFKCFCMEHYKPEGPKA
DKNEDDLNFLQQKEWATMDNCETICRFNLPFTSMYWAFGAFISNWQKVRKQGYDIPFGNYCSMQIVCCNNNMLTFATAATFDDFDSELAMNHFMEKEQGGVYIQQFFSIWPV
VNAKNWQNTTRDFVSFDDAWLHFWYLCNACEHENAIRAKECVKQDRINREGKPRPKWAMNDMFDPHFAKHWFWRNWMNQCTHQGWTDFIPNDNNMDSWTVRHHCLNN
KYMHMVVCDEMTEGAAFYMFRGKQCAFIHQRANRAMHANWGQAKQCGRHNCWNFIVVMGQIQHHECLQSMNKWTLIFKNHCKYAILWYGFGEGSEYQTLFALKTMYHWTYKDDLPCKYPANKDYNPDN'''.split('\n')
    R = list(map(float, '''8607.23439
1971.04786
8709.00402
11266.42199
8235.56654
303.10665
2357.25787
8466.09791
8558.03162
10495.83634
10676.24651
6683.13695
6347.094
11767.69195
4337.09408
3184.47869
4405.16051
4277.10193
4885.33241
4552.22892
6977.30121
10392.08682
10691.17277
3402.58421
10577.12984
6725.29956
2905.22579
6957.31497
7991.85212
7056.38338
6342.08651
487.22782
10277.05988
8187.98114
8988.40324
101.04768
5476.64529
4106.98518
9808.66184
10854.2361
5757.81923
4146.06144
636.3595
1489.71022
2992.57182
3821.83746
9328.65067
9272.4163
1432.68876
1461.63067
9902.82273
711.31876
1318.64583
4017.96648
6251.99937
3728.89324
3522.48896
5289.29043
7902.83342
6120.8378
6498.13619
943.37054
10520.10838
1758.89539
7544.66594
3565.82991
6598.1286
6856.26729
6897.93917
1732.75872
5920.88256
2368.96571
7184.47834
1871.97945
853.33885
1448.74118
10142.53101
5155.47645
11129.36308
7672.72452
1155.5825
5041.43352
188.07971
2609.34372
3021.41536
5256.5605
5662.7246'''.split('\n')))
    prsm = PRSM(n,strings,R)
    print(prsm.max_multiplicity_count)
    print(prsm.max_multiplicity_string)

if __name__ == '__main__':
    Main()