#Matt Person
#Rosalind Problem: TRAN
#source
'''Given: Two DNA strings s1 and s2 of equal length (at most 1 kbp).
Return: The transition/transversion ratio R(s1,s2).'''

class TRAN:
    def __init__(self,a,b):
        self.transition_transversion_ratio = self.get_transition_transversion_ratio(a,b)

    def get_mutation_type(self,a,b):
        if a == b:
            return 'none'
        if ((a == 'G' or a =='A') and (b == 'C' or b == 'T')) or \
                ((b == 'G' or b == 'A') and (a == 'C' or a =='T')):
            return 'transversion'
        return 'transition'

    def get_transition_transversion_ratio(self,a,b):
        transitions,transversions = 0,0
        for i in range(len(a)):
            mutation_type = self.get_mutation_type(a[i],b[i])
            if mutation_type == 'transition':
                transitions += 1
            elif mutation_type == 'transversion':
                transversions += 1
        return round(transitions/transversions,11)



def Main():
    a = 'ATGTAGCAATGTTCCGGCTGGGGTTACGAAAGCTGCTGAGCATGTCGACAGCAACCCTGTACGTCGGAGGTTAGGATGGTTAGATAGACATGCTGGGGCTGAGACAGACGTCAAAGAAAGACAGGCAGTGCGCCGCACAAACCAAATACAGATTCACTGGCTAATTGGTCGAGAGTCGATTCAGCAGAAGGAGCCCCACACATCTTTATGCATCATTCCGTATGATAATCGGCTCTGAACCGTACTTGATCATAATGTCAAATTCTGTGATGTGCAAGTGCTAACAATGCTTTTTACAGATCCGCAATCCGGCATAATCGAAGGTCTTATGTGGGCGCCTGTATGACAAATCCTCCTGTCTGTTGTGAGGTGCCTATGGTTGTTGCTTCCGAAGAGCTCGGTGGATACTATCAACTCTCAGGAAAAGGACTCCTGAGGCACAGTTCCGTGAGATCCTTCGCTTGTGAAGGTGGACGAAGTATGTTTTGCCTACTATTCCCGAACCGGCCCGTATCAAGGAACTCGTTCTAAGTAAGAATCAGTCTTTTGAGGTGTTCCAGGAGCCGAACCCTTTTAAAAGTAGATTTTCAATACGTATTCAAAATCACGCTGAGCCCGTTCGTATACGGCTAGCATCTTGGTTATGGAGTTCCCCAGCGCCTGATTAGAGGACTCCTGTGAGAGTAATCCATCTGCACTACAAAATCTCCGGCCCGTCTGCTCCCCTGTAAAACCTAGCAACATTATTCTACCGGACCCCAGGCGAGAATATGAGGGAGATTTCACTGTCCATTAGGCTCATAAATGCCCTATCCTCAGCAGCGTGTGAGGCGCTTTTCCACAGTGGCCTGGGTTGTCTTACTCACCCTAAGCCAACATTAGAAGACTACCTTTTGTACAGCTTTGGCCTCGCCAGTATAGC'
    b = 'ATGTAGCAAGGCTTTGCTCAGGGTCATGGAGGCTCCTTCGCGCGTCGACAGTAACCCTGTACTTCGGAGATTAGGAGGGTATGATAGATATCCCCGGACTGAGACAGCTATCGAATAAAAACAGGGAGCGCATCGCGCAAGTCGAACACAGATTTACTAGACACCAGTCCGAGTGTTGATCCTGCAAAAGGAGTCTCACACTTACTCGTGCATTATATTACTTGATAACAGGCTCTTAACCGTGCTTGATTAAAAAGTCCAATCCTTTGATACACAGATTTTAAAACTACCCTCTGCGGACCCACAATCTTCCATATTCGTAGATTTTATATAGCTGCCTGTGTAACAAGCCCACCCGTGTGATGTAGGGTTTCTATTGTTATTGCTTCCGAAGAGTCCCATGGGAACTATCAACCCTCAGGGTAGGGCCCCCCAAGGCACAGTTTCGTGAGATCCGTCAATTGTGAAGGTGGACAAAGCATGCTTTACCGGCCATAGCGGAACCGGCCCGGGTTAAGGGACTTACAACGGGCTTGGATTAGTCGTCTGAGGTGTTCTAGGAGCCAGGGCCCCCAAACTGTCGATTCTCAACACGTGTCCGAAATCATGTTGAGCGCGCCCATGTAAAGCCGGTATCTCTGTTAAGGAGTTACCCTGCGCCTATTTGGAGATCTCCTATAGTAGTAAACCATCTGCATTGTAAGGTTTTCGGCCCGTCTTTTCACCGGGGGAGCCTAACGATATTAGTTTGCCGGCCCCAAGCCGAGAATGCGAGAGCAATGTTACTCTTCACTAGGCCCACAGATGCCTTATCCCCGGCAGCCTATGAGACGTCGCTTTACAGTTACATAGGTTGGCTTGCTCGCCTCGAGCCAACATTAGGGTTTCATGCCTTCTACAGCCTTTATCTCGCCAATAAACC'
    solver = TRAN(a,b)
    print(solver.transition_transversion_ratio)


if __name__ == '__main__':
    Main()